#!/usr/bin/perl

use strict;
use Parse::RecDescent;
use Data::Dumper;

package Java::Type {
}

package Java::PrimitiveType {
  @ISA = ('Java::Type');
  sub new {
    my $type = shift;
    my $self = {};
    $self->{'type'} = shift;
  }
}

package Java::ArrayType {
  @ISA = ('Java::Type');

  sub new {
    my $type = shift;
    my $self = {};
    my $componen_typet = shift;
    $self->{'component_type'} = $component;
    $self->{'name'} = $component->{'name'} + '[]';
    bless $self, $type;    
  }
}

package Java::CompilationUnit {
  sub imports { return $_[0]->{'imports'}; }
  sub pkg { return $_[0]->{'package'}; }
}

package Java::TypeDecl {
  

}

# Find all the known imports
#my %imports = ();
#open IMPORTS, "findimport '' |";
#while ($_ = <IMPORTS>) {
#  /.*\.([^.;]*);/ or die "Could not parse import line: $_";
#  next if $imports{$1}; # only take the first hit for duplicates
#  $imports{$1} = $_;
#}

# Slurp the file
$/ = undef;
$_ = <>;
#$_ = "@ARGV";

$::RD_TRACE = 0; $::RD_HINT = 1; $::RD_WARN = 1;
# $::RD_AUTOSTUB = 1;

# First kill the comments (replace with spaces)
#$_ = kill_comments($_);

$Parse::RecDescent::skip = qr{ (?: \s+ | /\* (?: (?! \*/ ) . )*+ \*/ | // [^\n]*+\n )* }xs;
open GRAMMAR, "grammar";
my $grammar = <GRAMMAR>;
close GRAMMAR;

my $parser = new Parse::RecDescent($grammar) or die "Bad grammar!\n";

print STDERR "\nFOOOOOO\n\n";

#print Dumper($parser);

#my $tree = $parser->parameter_list("Provider<? extends DataSource> dataSource, Foo bar");

#my $tree = $parser->class_decl("class EvaluatorImpl { }");
my $tree = $parser->compilation_unit(\$_);
#my $tree = $parser->class_decl("{ void foo() {} }");

$tree or print "Bad text!\n";

print Dumper($tree);

print "UNPARSED: $_\n";

my @words = sort keys %::words;
print "@words\n";
