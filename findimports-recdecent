#!/usr/bin/perl

use strict;
use Parse::RecDescent;
use Data::Dumper;
use Scalar::Util qw(blessed reftype);

package Parse::RecDescent::Walker {

  # Usage: Parse::RecDescent::Walker->walk($tree, [$object]);
  sub walk {
    my $walker = bless {'target' => $_[2], 'seen' => {}}, $_[0];
    return $walker->walk_($_[1], '\$tree');
  }

  sub walk_ {
    my ($self, $tree, $prefix) = @_;
    #print "WALK_ $prefix, tree=", ::Dumper($tree), "\n"
    #  if $prefix =~ /primary\}$/ and $prefix !~ /primary.*primary/;
    my $format = $self->format_refaddr_($tree);
    #print "WALK_:\n", ::Dumper({format => $format, self => $self, prefix => $prefix}), "\n";
    return $self->{'seen'}->{$format} if exists $self->{'seen'}->{$format};
    #print "DESCENDING\n";
    my $type = ::reftype($tree) || '';
    my $rule = $type eq 'HASH' ? $tree->{'__RULE__'} : '';
    my $rv = $tree;
    if ($type eq 'ARRAY') {
      #print "ARRAY\n";
      my $i = 0;
      my @proto = map {
        my $newprefix = "$prefix\[$i\]"; $i++; $self->walk_($_, $newprefix);
      } @$tree;
      $rv = $self->wrap_($rule, \@proto);
      $self->{'seen'}->{$format} = $rv;
    } elsif ($type eq 'HASH') {
      #print "HASH\n";
      my %proto = map { $self->consolidate_($_, $tree->{$_}, $prefix) } keys %$tree;
      $rv = $self->wrap_($rule, \%proto);
      $self->{'seen'}->{$format} = $rv;
      #print "WALK_ $prefix, result=", ::Dumper($rv), "\n"
      #  if $prefix =~ /primary\}$/ and $prefix !~ /primary.*primary/;
    }
    #print "RESULT: $prefix => ", ::Dumper($rv), "\n";
    return $rv;
  }

  sub wrap_ {
    my ($self, $rule, $ref) = @_;
    my $target = $self->{'target'};
    return ($target and $target->can($rule)) ? $target->$rule($ref) : $ref;
  }

  sub format_refaddr_ {
    require Scalar::Util;
    #print "FORMAT: ", Scalar::Util::refaddr($_[1]), "\n";
    pack "J", Scalar::Util::refaddr($_[1]);
  }

  sub consolidate_ {
    my ($self, $key, $val, $prefix) = @_;

    #print "CONSOLIDATE_ $key ", ::Dumper($val), "\n"
    #  if $prefix =~ /primary\}$/ and $prefix !~ /primary.*primary/;

    #return () if $key =~ /DIRECTIVE/;
    if ($key =~ /(\w+)\(\?\)$/) {
      my $rule = $1;
      return () unless @$val;
      return $rule, $self->walk_($val->[0], "$prefix\{$key\}");
    }

    return ($key, $self->walk_($val, "$prefix\{$key\}"));
  }
}

# (Still need to figure out where the intercalated expression_assignment is coming from)

# Find all the known imports
#my %imports = ();
#open IMPORTS, "findimport '' |";
#while ($_ = <IMPORTS>) {
#  /.*\.([^.;]*);/ or die "Could not parse import line: $_";
#  next if $imports{$1}; # only take the first hit for duplicates
#  $imports{$1} = $_;
#}

# Slurp the file
$/ = undef;
$_ = <>;
#$_ = "@ARGV";

#$::RD_TRACE = 0; $::RD_HINT = 1; $::RD_WARN = 1;
# $::RD_AUTOSTUB = 1;

# First kill the comments (replace with spaces)
#$_ = kill_comments($_);

$Parse::RecDescent::skip = qr{ (?: \s+ | /\* (?: (?! \*/ ) . )*+ \*/ | // [^\n]*+\n )* }xs;
open GRAMMAR, "grammar";
my $grammar = <GRAMMAR>;
close GRAMMAR;

my $parser = new Parse::RecDescent($grammar) or die "Bad grammar!\n";

#print Dumper($parser);

#my $tree = $parser->parameter_list("Provider<? extends DataSource> dataSource, Foo bar");

#my $tree = $parser->class_decl("class EvaluatorImpl { }");
my $tree = $parser->compilation_unit(\$_);

package Java::Identifiers {
  sub identifier {
    #print "IDENTIFIER:\n", ::Dumper(\@_), "\n"; exit 0;
    return $_[1]->{'__PATTERN1__'};
  }
  sub qualified_identifier {
    return join '.', @{$_[1]->{'identifier(s)'}};
  }
  sub package_decl {
    $_[0]->{'package'} = $_[1]->{'qualified_identifier'};
    return {};
  }
  sub import_decl {
    #print "IMPORT DECL:\n", ::Dumper(\@_), "\n"; exit 0;
    my $import = {'name' => $_[1]->{'qualified_identifier'}};
    $import->{'static'} = !!$_[1]->{'static'};
    $import->{'wildcard'} = !!$_[1]->{'import_wildcard'};
    push @{$_[0]->{'imports'}}, $import;
    $import->{'name'} =~ /\.([^.]*)$/;
    my $unqualified = $1;
    if ($import->{'static'}) {
      $_[0]->{'imported primaries'}->{$unqualified} = 1;  
      $_[0]->{'imported methods'}->{$unqualified} = 1;  
    } else {
      $_[0]->{'imported types'}->{$unqualified} = 1;  
    }
    # What to do with wildcards?
    return {};
  }
  sub reference_type_component {
    #print "REFERENCE TYPE COMPONENT:\n", ::Dumper(\@_), "\n"; exit 0;
    return $_[1]->{'identifier'};
  }
  sub reference_type {
    #print "REFERENCE TYPE:\n", ::Dumper(\@_), "\n"; exit 0;
    my $type = join '.', @{$_[1]->{'reference_type_component(s)'}};
    $_[0]->{'types'}->{$type} = 1;
    return $_[1];
  }
  sub created_name_component {
    return $_[1]->{'identifier'};
  }
  sub created_name {
    my $type = join '.', @{$_[1]->{'created_name_component(s)'}};
    $_[0]->{'types'}->{$type} = 1;
    return $_[1];
  }
  sub annotation {
    $_[0]->{'types'}->{$_[1]->{'qualified_identifier'}} = 1;
    return $_[1];
  }
  sub type_parameter {
    #print "TYPE PARAMETER:\n", ::Dumper(\@_), "\n"; exit 0;
    $_[0]->{'imported types'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub variable_decl_id {
    $_[0]->{'imported primaries'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub class_decl {
    $_[0]->{'imported types'}->{$_[1]->{'identifier'}} = 1;
    $_[0]->{'imported primaries'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub enum_decl {
    $_[0]->{'imported types'}->{$_[1]->{'identifier'}} = 1;
    $_[0]->{'imported primaries'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub interface_decl {
    $_[0]->{'imported types'}->{$_[1]->{'identifier'}} = 1;
    $_[0]->{'imported primaries'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub annotation_decl {
    $_[0]->{'imported types'}->{$_[1]->{'identifier'}} = 1;
    $_[0]->{'imported primaries'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub method_decl {
    $_[0]->{'imported methods'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub interface_method_decl {
    $_[0]->{'imported methods'}->{$_[1]->{'identifier'}} = 1;
    return $_[1];
  }
  sub primary {
    my $egis = $_[1]->{'explicit_generic_invocation_suffix'};
    my $ident = $_[1]->{'identifier(s)'};
    # print "IDENT: $ident\n" if $ident;
    # print ::Dumper($_[1]);
    my $is = $_[1]->{'identifier_suffix'};
    if ($egis && $egis->{'identifier'}) {
      $_[0]->{'methods'}->{$egis->{'identifier'}} = 1;
    } elsif ($ident) {
      if (not $is or $is->{'array_index'}) {
        $_[0]->{'primaries'}->{$ident->[0]} = 1;
      } elsif ($is->{'class'}) {
        $_[0]->{'types'}->{$ident->[0]} = 1;
      } elsif ($is->{'arguments'}) {
        # ACK! can't tell if the base is a primary or a type... we could
        # keep better track of whether things are imported static or not.
        my @ident = @$ident;
        if (@ident > 1) {
          $_[0]->{'types'}->{$ident[0]} = 1;
          $_[0]->{'primaries'}->{$ident[0]} = 1;
        }
        $_[0]->{'methods'}->{$ident[$#ident]} = 1;
      }
    }
    return $_[1];
  }

  sub new {
    return bless {
                  'imports' => [],
                  'types' => {},
                  'methods' => {},
                  'primaries' => {},
                  'imported types' => {},
                  'imported methods' => {},
                  'imported primaries' => {},
                 }, $_[0];
  }
  sub imports {
    return @{$_[0]->{'imports'}};
  }
  sub types {
    return sort keys %{$_[0]->{'types'}};
  }
  sub methods {
    return sort keys %{$_[0]->{'methods'}};
  }
  sub primaries {
    return sort keys %{$_[0]->{'primaries'}};
  }
  sub unimported {
    foreach my $t ('types', 'methods', 'primaries') {
      my @unimported = grep { not $_[0]->{"imported $t"}->{$_} } keys %{$_[0]->{$t}};
      print "UNIMPORTED $t: @unimported\n";
    }
  }
}



#$tree = ::clean $tree;
#print Dumper($tree); exit 0;

my $id = Java::Identifiers->new;
$tree = Parse::RecDescent::Walker->walk($tree, $id);
#my $tree = $parser->class_decl("{ void foo() {} }");

$tree or print "Bad text!\n";
print STDERR "\nFOOOOOO\n\n";

print Dumper($tree);
my @imports = map { $_->{'static'} ? $_->{'name'} : '' } $id->imports;
print "IMPORTS: @imports\n";

my @types = $id->types;
print "TYPES: @types\n";

$id->unimported;

print "UNPARSED: $_\n";

my @words = sort keys %::words;
print "@words\n";
